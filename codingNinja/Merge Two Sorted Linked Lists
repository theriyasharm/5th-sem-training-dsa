#include <iostream>

// Definition for a singly-linked list node
template <typename T>
struct Node {
    T data;
    Node* next;
    Node(T val) : data(val), next(nullptr) {}
};

// Function to merge two sorted linked lists
template <typename T>
Node<T>* sortTwoLists(Node<T>* first, Node<T>* second) {
    // If either list is empty, return the other list
    if (first == nullptr) return second;
    if (second == nullptr) return first;

    // Create a dummy node as the head of the merged list
    Node<T>* dummy = new Node<T>(0);
    Node<T>* current = dummy;

    // Traverse both lists and add the smaller element to the merged list
    while (first != nullptr && second != nullptr) {
        if (first->data <= second->data) {
            current->next = first;
            first = first->next;
        } else {
            current->next = second;
            second = second->next;
        }
        current = current->next;
    }

    // If there are remaining elements in either list, add them
    if (first != nullptr) {
        current->next = first;
    }
    if (second != nullptr) {
        current->next = second;
    }

    // Get the head of the merged list
    Node<T>* mergedHead = dummy->next;

    // Delete the dummy node
    delete dummy;

    return mergedHead;
}

// Helper function to print the linked list
template <typename T>
void printList(Node<T>* head) {
    while (head != nullptr) {
        std::cout << head->data << " ";
        head = head->next;
    }
    std::cout << std::endl;
}

// Helper function to create a linked list from an array
template <typename T>
Node<T>* createList(const T* values, int size) {
    if (size == 0) return nullptr;

    Node<T>* head = new Node<T>(values[0]);
    Node<T>* current = head;

    for (int i = 1; i < size; ++i) {
        current->next = new Node<T>(values[i]);
        current = current->next;
    }

    return head;
}

// Main function to test the sortTwoLists function
int main() {
    // Create two sorted linked lists
    int firstListValues[] = {1, 3, 5};
    int secondListValues[] = {2, 4, 6};

    Node<int>* first = createList(firstListValues, sizeof(firstListValues) / sizeof(firstListValues[0]));
    Node<int>* second = createList(secondListValues, sizeof(secondListValues) / sizeof(secondListValues[0]));

    std::cout << "First list: ";
    printList(first);

    std::cout << "Second list: ";
    printList(second);

    Node<int>* merged = sortTwoLists(first, second);

    std::cout << "Merged list: ";
    printList(merged);

    // Clean up memory
    while (merged != nullptr) {
        Node<int>* next = merged->next;
        delete merged;
        merged = next;
    }

    return 0;
}

