#include <iostream>

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode(int x) : val(x), next(NULL) {}
};

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        if (head == nullptr || head->next == nullptr) {
            return nullptr;
        }
        
        ListNode *slow = head;
        ListNode *fast = head;
        ListNode *entry = head;
        
        while (fast->next && fast->next->next) {
            slow = slow->next;
            fast = fast->next->next;
            
            if (slow == fast) {  // There is a cycle
                while (slow != entry) {  // Find the entry location
                    slow = slow->next;
                    entry = entry->next;
                }
                return entry;
            }
        }
        
        return nullptr;  // No cycle
    }
};

// Function to create a linked list with a cycle
ListNode* createLinkedListWithCycle(int arr[], int n, int pos) {
    if (n == 0) return nullptr;

    ListNode* head = new ListNode(arr[0]);
    ListNode* current = head;
    ListNode* cycleNode = nullptr;

    for (int i = 1; i < n; i++) {
        current->next = new ListNode(arr[i]);
        current = current->next;
        if (i == pos) cycleNode = current;
    }

    if (cycleNode) current->next = cycleNode;

    return head;
}

int main() {
    Solution solution;

    // Test case 1: Linked list with a cycle
    int arr1[] = {3, 2, 0, -4};
    ListNode* head1 = createLinkedListWithCycle(arr1, 4, 1);
    ListNode* result1 = solution.detectCycle(head1);
    
    if (result1) {
        std::cout << "Cycle detected at node with value: " << result1->val << std::endl;
    } else {
        std::cout << "No cycle detected" << std::endl;
    }

    // Test case 2: Linked list without a cycle
    int arr2[] = {1, 2, 3, 4};
    ListNode* head2 = createLinkedListWithCycle(arr2, 4, -1);
    ListNode* result2 = solution.detectCycle(head2);
    
    if (result2) {
        std::cout << "Cycle detected at node with value: " << result2->val << std::endl;
    } else {
        std::cout << "No cycle detected" << std::endl;
    }

    return 0;
}
