#include <iostream>
#include <vector>
#include <unordered_set>

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
    int numComponents(ListNode* head, std::vector<int>& nums) {
        std::unordered_set<int> numSet(nums.begin(), nums.end());
        int components = 0;
        bool inComponent = false;
        
        while (head != nullptr) {
            if (numSet.count(head->val)) {
                if (!inComponent) {
                    components++;
                    inComponent = true;
                }
            } else {
                inComponent = false;
            }
            head = head->next;
        }
        
        return components;
    }
};

// Helper function to create a linked list from a vector
ListNode* createLinkedList(const std::vector<int>& values) {
    if (values.empty()) return nullptr;
    ListNode* head = new ListNode(values[0]);
    ListNode* current = head;
    for (size_t i = 1; i < values.size(); i++) {
        current->next = new ListNode(values[i]);
        current = current->next;
    }
    return head;
}

// Helper function to delete a linked list
void deleteLinkedList(ListNode* head) {
    while (head != nullptr) {
        ListNode* temp = head;
        head = head->next;
        delete temp;
    }
}

int main() {
    Solution solution;

    // Test case 1
    std::vector<int> list1 = {0, 1, 2, 3};
    ListNode* head1 = createLinkedList(list1);
    std::vector<int> nums1 = {0, 1, 3};
    int result1 = solution.numComponents(head1, nums1);
    std::cout << "Test case 1 result: " << result1 << std::endl;
    deleteLinkedList(head1);

    // Test case 2
    std::vector<int> list2 = {0, 1, 2, 3, 4};
    ListNode* head2 = createLinkedList(list2);
    std::vector<int> nums2 = {0, 3, 1, 4};
    int result2 = solution.numComponents(head2, nums2);
    std::cout << "Test case 2 result: " << result2 << std::endl;
    deleteLinkedList(head2);

    return 0;
}
