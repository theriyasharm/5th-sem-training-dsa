#include <iostream>
#include <vector>

using namespace std;

class Solution {
public:
    vector<vector<int>> matrixReshape(vector<vector<int>>& mat, int r, int c) {
        int m = mat.size();
        int n = mat[0].size();

        // Check if reshape is possible
        if (m * n != r * c) {
            return mat;  // Return original matrix if not possible
        }

        vector<vector<int>> reshaped(r, vector<int>(c));

        for (int i = 0; i < m * n; i++) {
            // Calculate original indices
            int orig_row = i / n;
            int orig_col = i % n;

            // Calculate new indices
            int new_row = i / c;
            int new_col = i % c;

            // Copy element to new position
            reshaped[new_row][new_col] = mat[orig_row][orig_col];
        }

        return reshaped;
    }
};

// Main function to test Solution class
int main() {
    Solution sol;

    // Example matrix
    vector<vector<int>> mat = {
        {1, 2},
        {3, 4}
    };

    // Desired number of rows and columns
    int r = 1, c = 4;

    // Call the function
    vector<vector<int>> result = sol.matrixReshape(mat, r, c);

    // Print the result
    cout << "Reshaped matrix:" << endl;
    for (const auto& row : result) {
        for (int num : row) {
            cout << num << " ";
        }
        cout << endl;
    }

    return 0;
}

