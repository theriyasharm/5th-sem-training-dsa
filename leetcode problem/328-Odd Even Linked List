#include <iostream>

struct ListNode {
    int val;
    ListNode* next;
    ListNode(int x) : val(x), next(nullptr) {}
};

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (!head || !head->next) return head;

        ListNode* odd = head;
        ListNode* even = head->next;
        ListNode* evenHead = even;

        while (even && even->next) {
            odd->next = even->next;
            odd = odd->next;

            even->next = odd->next;
            even = even->next;
        }

        odd->next = evenHead;
        return head;
    }
};

// Helper functions to create and print the list
ListNode* createList(const std::initializer_list<int>& vals) {
    if (vals.size() == 0) return nullptr;
    ListNode* head = new ListNode(*vals.begin());
    ListNode* current = head;
    for (auto it = std::next(vals.begin()); it != vals.end(); ++it) {
        current->next = new ListNode(*it);
        current = current->next;
    }
    return head;
}

void printList(ListNode* head) {
    while (head) {
        std::cout << head->val;
        if (head->next) std::cout << " -> ";
        head = head->next;
    }
    std::cout << std::endl;
}

int main() {
    Solution solution;

    // Test Case 1
    ListNode* head1 = createList({1, 2, 3, 4, 5});
    ListNode* result1 = solution.oddEvenList(head1);
    printList(result1);

    // Test Case 2
    ListNode* head2 = createList({2, 1, 3, 5, 6, 4, 7});
    ListNode* result2 = solution.oddEvenList(head2);
    printList(result2);

    return 0;
}
