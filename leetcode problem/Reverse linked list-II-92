#include <iostream>
#include<vector>
using namespace std;

// Definition for singly-linked list node.
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
        if (!head || left == right) return head;

        ListNode dummy(0);
        dummy.next = head;
        ListNode* prev = &dummy;

        // Move to the node just before the left position
        for (int i = 0; i < left - 1; i++) {
            prev = prev->next;
        }

        ListNode* start = prev->next;
        ListNode* then = start->next;

        // Reverse the sublist
        for (int i = 0; i < right - left; i++) {
            start->next = then->next;
            then->next = prev->next;
            prev->next = then;
            then = start->next;
        }

        return dummy.next;
    }
};

// Helper function to print linked list
void printList(ListNode* head) {
    while (head) {
        cout << head->val << " ";
        head = head->next;
    }
    cout << endl;
}

// Helper function to create a linked list from an array
ListNode* createList(const vector<int>& values) {
    ListNode dummy;
    ListNode* current = &dummy;
    for (int value : values) {
        current->next = new ListNode(value);
        current = current->next;
    }
    return dummy.next;
}

// Main function to test reverseBetween
int main() {
    Solution solution;

    // Create a test linked list: 1 -> 2 -> 3 -> 4 -> 5
    vector<int> values = {1, 2, 3, 4, 5};
    ListNode* head = createList(values);

    // Reverse between positions 2 and 4 (1-based index)
    ListNode* newHead = solution.reverseBetween(head, 2, 4);

    // Print the result
    cout << "Reversed list between positions 2 and 4:" << endl;
    printList(newHead);

    // Clean up memory
    while (newHead) {
        ListNode* next = newHead->next;
        delete newHead;
        newHead = next;
    }

    return 0;
}

