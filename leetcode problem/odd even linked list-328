#include <iostream>

// Definition for singly-linked list.
struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
};

class Solution {
public:
    ListNode* oddEvenList(ListNode* head) {
        if (head == nullptr || head->next == nullptr) {
            return head;
        }
        
        ListNode* odd = head;
        ListNode* even = head->next;
        ListNode* evenHead = even;
        
        while (even != nullptr && even->next != nullptr) {
            odd->next = even->next;
            odd = odd->next;
            even->next = odd->next;
            even = even->next;
        }
        
        odd->next = evenHead;
        
        return head;
    }
};

// Helper function to create a linked list from an array
ListNode* createLinkedList(int arr[], int n) {
    if (n == 0) return nullptr;
    ListNode* head = new ListNode(arr[0]);
    ListNode* current = head;
    for (int i = 1; i < n; i++) {
        current->next = new ListNode(arr[i]);
        current = current->next;
    }
    return head;
}

// Helper function to print a linked list
void printLinkedList(ListNode* head) {
    ListNode* current = head;
    while (current != nullptr) {
        std::cout << current->val << " ";
        current = current->next;
    }
    std::cout << std::endl;
}

int main() {
    Solution solution;

    // Test case 1
    int arr1[] = {1, 2, 3, 4, 5};
    ListNode* head1 = createLinkedList(arr1, 5);
    std::cout << "Original list: ";
    printLinkedList(head1);
    head1 = solution.oddEvenList(head1);
    std::cout << "After oddEvenList: ";
    printLinkedList(head1);

    // Test case 2
    int arr2[] = {2, 1, 3, 5, 6, 4, 7};
    ListNode* head2 = createLinkedList(arr2, 7);
    std::cout << "\nOriginal list: ";
    printLinkedList(head2);
    head2 = solution.oddEvenList(head2);
    std::cout << "After oddEvenList: ";
    printLinkedList(head2);

    return 0;
}
